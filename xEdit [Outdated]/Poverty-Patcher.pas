unit UserScript;

uses 'lib\mxpf';

function Initialize: integer;

var
  changed: boolean;
  i, j, k, lastPercent: integer;
  currentFile, currentSignature, editorID, formID, rName, rFormID, rEditorID, rSignature, item, fIngredient, fEditor, lNewItem, fSignature, reference, fFormID, lEditorID, lSignature, lFormID, cNewItem, cEditorID, cSignature, nItem, nEditorID, nSignature, tIngredient, tEditorID, tSignature, tFormID, povertyFileLoadOrder, dummyDrink, dummyFood, dummyPotion, dummyArrow, dummyAmulet, dummyBoots, dummyCirclet, dummyCuirass, dummyGauntlets, dummyHelmet, dummyRing, dummyShield, dummyBook, dummyIngredient, dummyClutter, dummyResource, dummySeptim, dummySoulGem, dummyBattleaxe, dummyBow, dummyDagger, dummyGreatSword, dummyMace, dummyStaff, dummySword, dummyWarAxe, dummyWarhammer, dummyWeapon1H, dummyWeapon2H: string;
  rec, lvliRecord, rItemRecord, ItemsListubRecord, cItem, lEntries, lEntry, nItems: IInterface;
  referenceKeywords, failedFormIDs, errorFormIDs, cItemsList, cCountsList, lLevelList, lReferenceList, lCountList, blacklist, blacklistCONT, blacklistFLOR, blacklistLVLI, blacklistNPC, blacklistREFR, blacklistTREE: TStringList;

begin
	//--------------------------------
	//MXPF Initialization
	//--------------------------------
	InitializeMXPF;
	DefaultOptionsMXPF;

	//Name this whatever you like
	PatchFileByName('Poverty All-in-One Patch.esp');
	
	//Add USSEP and Poverty as master
	AddMasterIfMissing(mxPatchFile, 'Unofficial Skyrim Special Edition Patch.esp');
	AddMasterIfMissing(mxPatchFile, 'Poverty.esp');
	
	//Set File Header variables
	seev(mxPatchFile, 'CNAM', 'Evrymetul and Elscrux');
	seev(mxPatchFile, 'SNAM', 'All-in-One Patch for Poverty by evrymetul - Automatically generated by xEdit-Patcher by Elscrux');
	
	SetExclusions('Poverty.esp');
	SetInclusions('HearthFires.esm');
	SetInclusions('Dawnguard.esm');

	//--------------------------------
	//Loading records
	//--------------------------------
	LoadChildRecords('CELL', 'REFR');
	LoadChildRecords('WRLD', 'REFR');
	LoadRecords('CONT');
	LoadRecords('FLOR');
	LoadRecords('LVLI');
	LoadRecords('NPC_');
	LoadRecords('TREE');
	
	
	//--------------------------------
	//MESSAGE: Records loaded
	//--------------------------------
	AddMessage('Records loaded');
	
	//MXPF: Copy to patch
	CopyRecordsToPatch;
	
	
	//--------------------------------
	//MESSAGE: Records copied
	//--------------------------------
	AddMessage('Records copied to patch');
	
	
	//--------------------------------
	//Creating TStringLists
	//--------------------------------
	referenceKeywords := TStringList.Create;
	failedFormIDs := TStringList.Create;
	errorFormIDs := TStringList.Create;
	cItemsList := TStringList.Create;
	cCountsList := TStringList.Create;
	lLevelList := TStringList.Create;
	lReferenceList := TStringList.Create;
	lCountList := TStringList.Create;
	blacklist := TStringList.Create;
	blacklistCONT := TStringList.Create;
	blacklistFLOR := TStringList.Create;
	blacklistLVLI := TStringList.Create;
	blacklistNPC := TStringList.Create;
	blacklistREFR := TStringList.Create;
	blacklistTREE := TStringList.Create;
	
	
	//--------------------------------
	//Get dummys from Skyrim & Poverty
	//--------------------------------
	povertyFileLoadOrder := IntToStr(GetLoadOrder(FileByName('Poverty.esp')));
	
	//ALCH
	dummyDrink := povertyFileLoadOrder + '01A21D';
	dummyFood := povertyFileLoadOrder + '01A21E';
	dummyPotion := '6A07E';
	//AMMO
	dummyArrow := '6A0BF';
	//ARMO
	dummyAmulet := povertyFileLoadOrder + '014C9A';
	dummyBoots := '6A0A9';
	dummyCirclet := povertyFileLoadOrder + '019DD5';
	dummyCuirass := '6A0AB';
	dummyGauntlets := '6A0AD';
	dummyHelmet := '6A0AF';
	dummyRing := povertyFileLoadOrder + '014C99';
	dummyShield := '6A0B1';
	//BOOK
	dummyBook := 'D7866';
	//INGR
	dummyIngredient := povertyFileLoadOrder + '01A017';
	//MISC
	dummyClutter := povertyFileLoadOrder + '01A163';
	dummyResource := povertyFileLoadOrder + '01A153';
	dummySeptim := povertyFileLoadOrder + '01A119';
	//SLGM
	dummySoulGem := '6A0C2';
	//WEAP
	dummyBattleaxe := '6A0BB';
	dummyBow := '6A0BD';
	dummyDagger := '20163';
	dummyGreatSword := '6A0B8';
	dummyMace := '6A0BA';
	dummyStaff := povertyFileLoadOrder + '01A116';
	dummySword := '6A0B9';
	dummyWarAxe := '6A0BC';
	dummyWarhammer := '20154';
	dummyWeapon1H := '6B95F';
	dummyWeapon2H := '6B95D';
	
	
	//--------------------------------
	//MESSAGE: Number of Records
	//--------------------------------
	AddMessage('Patching ' + IntToStr(MaxPatchRecordIndex + 1) + ' Records');
	AddMessage(' ');
	
	
	//--------------------------------
	//Blacklist CONT EditorIDs
	//--------------------------------
	
	blacklistCONT.Add('DEMO');
	blacklistCONT.Add('DLC01QA');
	blacklistCONT.Add('DLC02QA');
	blacklistCONT.Add('DLC2dunFrostmoonVendorChest');
	blacklistCONT.Add('DLC2MaximianPack');
	blacklistCONT.Add('e3DEMO');
	blacklistCONT.Add('E3Demo');
	blacklistCONT.Add('MQ101BarracksChest02');
	blacklistCONT.Add('MQ201ElenwenOfficeChest');
	blacklistCONT.Add('QA');
	blacklistCONT.Add('SkyHavenArmoryChest');
	
	
	//--------------------------------
	//Blacklist LVLI EditorIDs
	//--------------------------------
	
	blacklistLVLI.Add('ArmorCompanionsSet');
	blacklistLVLI.Add('ArmorElvenSet');
	blacklistLVLI.Add('ArmorGlassSet');
	blacklistLVLI.Add('ArmorHideSet');
	blacklistLVLI.Add('ArmorImperialHeavyHelmets');
	blacklistLVLI.Add('ArmorImperialHeavySet');
	blacklistLVLI.Add('ArmorImperialLightSet');
	blacklistLVLI.Add('ArmorImperialStuddedSet');
	blacklistLVLI.Add('ArmorIronSet');
	blacklistLVLI.Add('ArmorLeatherSet');
	blacklistLVLI.Add('ArmorOrcSet');
	blacklistLVLI.Add('ArmorReachHelmet');
	blacklistLVLI.Add('ArmorScaledSet');
	blacklistLVLI.Add('ArmorStormcloakBearSet');
	blacklistLVLI.Add('ArmorStormcloakHelmets');
	blacklistLVLI.Add('ArmorStormcloakSet');
	blacklistLVLI.Add('ArmorStuddedSet');
	blacklistLVLI.Add('BYOHHouseTestItems');
	blacklistLVLI.Add('BYOHLItemInnRuralDrinkNewWines');
	blacklistLVLI.Add('BYOHRelationshipAdoptionLItemChildrensClothes');
	blacklistLVLI.Add('ClothesFarm');
	blacklistLVLI.Add('CW01BPlayerHelpItems');
	blacklistLVLI.Add('CWBearArmorPlayerReward');
	blacklistLVLI.Add('CWCourierDocuments');
	blacklistLVLI.Add('CWFinaleFactionLeaderSwordList');
	blacklistLVLI.Add('CWPlayerUniform');
	blacklistLVLI.Add('CWRankReward');
	blacklistLVLI.Add('CWSoldierImperialGear');
	blacklistLVLI.Add('CWSoldierSonsGear');
	blacklistLVLI.Add('CWSoldierWoundedOutfit');
	blacklistLVLI.Add('DA03AxeDeathItem');
	blacklistLVLI.Add('DA09DawnbreakerList');
	blacklistLVLI.Add('DA14RingDeathItem');
	blacklistLVLI.Add('DA14StaffDeathItem');
	blacklistLVLI.Add('DB02ShackKey');
	blacklistLVLI.Add('DB08DeathBook');
	blacklistLVLI.Add('DeathContainerList');
	blacklistLVLI.Add('DeathItemDwarvenSphere');
	blacklistLVLI.Add('DLC1DawnGuardHelmet75');
	blacklistLVLI.Add('DLC1FalmerShamanWeapon');
	blacklistLVLI.Add('DLC1LItemDaedric');
	blacklistLVLI.Add('DLC1LItemDawnguard');
	blacklistLVLI.Add('DLC1LItemDisguisedHunterInventory');
	blacklistLVLI.Add('DLC1LItemFalmer');
	blacklistLVLI.Add('DLC1LItemGargoyleMineralsRaw100');
	blacklistLVLI.Add('DLC1LItemKeeper');
	blacklistLVLI.Add('DLC1LitemStaffFalmer');
	blacklistLVLI.Add('DLC1LItemStaffFalmer');
	blacklistLVLI.Add('DLC1LItemVampireCuirass');
	blacklistLVLI.Add('DLC1LItemWeaponDawnguardCrossbowLoot75Gated');
	blacklistLVLI.Add('DLC1LItemWeaponFalmerShaman');
	blacklistLVLI.Add('DLC1RV03HunterArmor');
	blacklistLVLI.Add('DLC1RV05RemainsList');
	blacklistLVLI.Add('DLC1SublistEnchCrossbow');
	blacklistLVLI.Add('DLC1SublistEnchDwarvenCrossbow');
	blacklistLVLI.Add('DLC1SublistEnchVampireRobes');
	blacklistLVLI.Add('DLC1SublistKeeper');
	blacklistLVLI.Add('DLC1SublistStaffDestructionFalmer');
	blacklistLVLI.Add('DLC1WrathmanSummonedWeapon2H');
	blacklistLVLI.Add('DLC2BlacksmithArmorExtra100');
	blacklistLVLI.Add('DLC2BlankStaff');
	blacklistLVLI.Add('DLC2Bonemold');
	blacklistLVLI.Add('DLC2Chitin');
	blacklistLVLI.Add('DLC2dunHaknirGhostLeveledList');
	blacklistLVLI.Add('DLC2dunKolbjornLItemMinerClothes');
	blacklistLVLI.Add('DLC2ExpSpiderAlbinoDeathItemButt');
	blacklistLVLI.Add('DLC2LItemArmorBootsHeavy');
	blacklistLVLI.Add('DLC2LItemArmorBootsLight');
	blacklistLVLI.Add('DLC2LitemArmorBootsLight');
	blacklistLVLI.Add('DLC2LItemArmorCuirassHeavy');
	blacklistLVLI.Add('DLC2LItemArmorCuirassLight');
	blacklistLVLI.Add('DLC2LItemArmorGauntletsHeavy');
	blacklistLVLI.Add('DLC2LItemArmorGauntletsLight');
	blacklistLVLI.Add('DLC2LItemArmorHelmetHeavy');
	blacklistLVLI.Add('DLC2LItemArmorHelmetLight');
	blacklistLVLI.Add('DLC2LItemArmorShieldHeavy');
	blacklistLVLI.Add('DLC2LitemArmorShieldHeavy');
	blacklistLVLI.Add('DLC2LItemArmorShieldLight');
	blacklistLVLI.Add('DLC2LItemBook');
	blacklistLVLI.Add('DLC2LItemDraugrHulkingShield67');
	blacklistLVLI.Add('DLC2LItemDrink75');
	blacklistLVLI.Add('DLC2LItemIldariRobesDestruction');
	blacklistLVLI.Add('DLC2LItemIngredientFoodPrepared');
	blacklistLVLI.Add('DLC2LItemIngredientsCommon');
	blacklistLVLI.Add('DLC2LItemIngredientsRare');
	blacklistLVLI.Add('DLC2LItemIngredientsUncommon');
	blacklistLVLI.Add('DLC2LItemSpellTomes');
	blacklistLVLI.Add('DLC2LItemSpellTOmes');
	blacklistLVLI.Add('DLC2LitemSpellTomes');
	blacklistLVLI.Add('DLC2LItemWeaponBattleAxe');
	blacklistLVLI.Add('DLC2LItemWeaponBow');
	blacklistLVLI.Add('DLC2LItemWeaponDagger');
	blacklistLVLI.Add('DLC2LItemWeaponGreatSword');
	blacklistLVLI.Add('DLC2LItemWeaponMace');
	blacklistLVLI.Add('DLC2LItemWeaponSword');
	blacklistLVLI.Add('DLC2LItemWeaponWarAxe');
	blacklistLVLI.Add('DLC2LItemWeaponWarhammer');
	blacklistLVLI.Add('DLC2LootRieklingSpears50');
	blacklistLVLI.Add('DLC2MerilarRendasDeathItem');
	blacklistLVLI.Add('DLC2MQ06Miraak');
	blacklistLVLI.Add('DLC2NordicHeavyBoss');
	blacklistLVLI.Add('DLC2NordicShield20');
	blacklistLVLI.Add('DLC2OutfitSkaalHatChance50');
	blacklistLVLI.Add('DLC2SpellBook');
	blacklistLVLI.Add('DLC2Stalhrim');
	blacklistLVLI.Add('DLC2SublistEnchArmor');
	blacklistLVLI.Add('DLC2SublistEnchNordic');
	blacklistLVLI.Add('DLC2SublistEnchStahlrim');
	blacklistLVLI.Add('DLC2SublistEnchStalhrim');
	blacklistLVLI.Add('dunHillgrundsTombRewardList');
	blacklistLVLI.Add('dunLItemFolgunthurMikrulSword');
	blacklistLVLI.Add('dunLItemFrostmereBlade');
	blacklistLVLI.Add('dunLItemGeirmundSigdisBow');
	blacklistLVLI.Add('dunMarkarthWizardMeleeSecurity');
	blacklistLVLI.Add('dunSilentMoonsLItemEnch');
	blacklistLVLI.Add('GuardGear');
	blacklistLVLI.Add('LItemApothecaryRecipesCommon100');
	blacklistLVLI.Add('LItemArmorBootsHeavy');
	blacklistLVLI.Add('LItemArmorBootsLight');
	blacklistLVLI.Add('LitemArmorBootsLight');
	blacklistLVLI.Add('LItemArmorCuirassHeavy');
	blacklistLVLI.Add('LItemArmorCuirassLight');
	blacklistLVLI.Add('LItemArmorDwarven');
	blacklistLVLI.Add('LItemArmorGauntletsHeavy');
	blacklistLVLI.Add('LItemArmorGauntletsLight');
	blacklistLVLI.Add('LItemArmorHelmetHeavy');
	blacklistLVLI.Add('LItemArmorHelmetLight');
	blacklistLVLI.Add('LItemArmorShieldHeavy');
	blacklistLVLI.Add('LitemArmorShieldHeavy');
	blacklistLVLI.Add('LItemArmorShieldLight');
	blacklistLVLI.Add('LItemBandit');
	blacklistLVLI.Add('LItemBlacksmithMinDagger');
	blacklistLVLI.Add('LItemBook');
	blacklistLVLI.Add('LItemClothesFarm');
	blacklistLVLI.Add('LItemClothesRegular');
	blacklistLVLI.Add('LItemClothesWork');
	blacklistLVLI.Add('LItemDA13Armor');
	blacklistLVLI.Add('LItemDawnguard');
	blacklistLVLI.Add('LItemDragonPriestStaff100');
	blacklistLVLI.Add('LItemDraugr');
	blacklistLVLI.Add('LItemDwarvenOnly');
	blacklistLVLI.Add('LItemEnchCirclet');
	blacklistLVLI.Add('LItemEnchDaedricAny');
	blacklistLVLI.Add('LItemEnchImperialSword');
	blacklistLVLI.Add('LItemEnchNecklace');
	blacklistLVLI.Add('LItemEnchNecromancerRobes');
	blacklistLVLI.Add('LItemEnchOrcishBattleaxe');
	blacklistLVLI.Add('LItemEnchRing');
	blacklistLVLI.Add('LItemFalmerWeapon');
	blacklistLVLI.Add('LItemFoodBlackBriarMead100');
	blacklistLVLI.Add('LItemFoodChild');
	blacklistLVLI.Add('LItemFoodHonningbrewMead100');
	blacklistLVLI.Add('LItemFoodRaw');
	blacklistLVLI.Add('LItemForsworn');
	blacklistLVLI.Add('LItemGemEmpty');
	blacklistLVLI.Add('LItemGems');
	blacklistLVLI.Add('LItemGutterSaint');
	blacklistLVLI.Add('LItemHunterWeaponBow');
	blacklistLVLI.Add('LItemIngotGold50');
	blacklistLVLI.Add('LItemIngredientFoodPrepared');
	blacklistLVLI.Add('LItemIngredientsCommon');
	blacklistLVLI.Add('LItemIngredientsRare');
	blacklistLVLI.Add('LItemIngredientsUncommon');
	blacklistLVLI.Add('LItemIngredientUncommonSame75');
	blacklistLVLI.Add('LItemIngredientsUnderground');
	blacklistLVLI.Add('LItemIronOrSteel');
	blacklistLVLI.Add('LItemJewelryCirclet');
	blacklistLVLI.Add('LItemJewelryNecklace');
	blacklistLVLI.Add('LItemJewelryRing');
	blacklistLVLI.Add('LItemJewelryRingSmall');
	blacklistLVLI.Add('LitemJunk');
	blacklistLVLI.Add('LItemLockPick100');
	blacklistLVLI.Add('LItemLootIMineralsProcessed');
	blacklistLVLI.Add('LItemMaceForOrcs');
	blacklistLVLI.Add('LItemMiscVendorGems100');
	blacklistLVLI.Add('LItemMiscVendorSoulGemEmpty');
	blacklistLVLI.Add('LItemMiscVendorSoulGemFull');
	blacklistLVLI.Add('LItemMS09');
	blacklistLVLI.Add('LItemNecromancerRobes');
	blacklistLVLI.Add('LItemOrcStronghold');
	blacklistLVLI.Add('LItemOre');
	blacklistLVLI.Add('LItemPenitusWeapon1H');
	blacklistLVLI.Add('LItemPoison');
	blacklistLVLI.Add('LItemPotion');
	blacklistLVLI.Add('LItemReligiousSymbols');
	blacklistLVLI.Add('LItemRobes');
	blacklistLVLI.Add('LItemScroll');
	blacklistLVLI.Add('LItemSilverHandWeapon');
	blacklistLVLI.Add('LItemSoldierImperial');
	blacklistLVLI.Add('LItemSoldierSons');
	blacklistLVLI.Add('LItemSoulGemEmpty');
	blacklistLVLI.Add('LItemSoulGemFull');
	blacklistLVLI.Add('LItemSpellTomes');
	blacklistLVLI.Add('LitemSpellTomes');
	blacklistLVLI.Add('LItemSpellTOmes');
	blacklistLVLI.Add('LItemStaffAlteration');
	blacklistLVLI.Add('LItemStaffConjuration');
	blacklistLVLI.Add('LItemStaffDestruction00');
	blacklistLVLI.Add('LItemStaffDestruction25');
	blacklistLVLI.Add('LItemStaffDestruction50');
	blacklistLVLI.Add('LItemStaffDestruction75');
	blacklistLVLI.Add('LItemStaffIllusion');
	blacklistLVLI.Add('LItemStaffRestoration');
	blacklistLVLI.Add('LItemSummersetShadowsArmor');
	blacklistLVLI.Add('LItemTGAmuletofArticulation');
	blacklistLVLI.Add('LItemThalmorDagger');
	blacklistLVLI.Add('LItemThalmorShield');
	blacklistLVLI.Add('LItemVampire');
	blacklistLVLI.Add('LItemVigilant');
	blacklistLVLI.Add('LItemWarlock');
	blacklistLVLI.Add('LITemWarlockRobes');
	blacklistLVLI.Add('LItemWeaponBattleAxe');
	blacklistLVLI.Add('LItemWeaponBow');
	blacklistLVLI.Add('LItemWeaponDagger');
	blacklistLVLI.Add('LItemWeaponDwarven');
	blacklistLVLI.Add('LItemWeaponGreatSword');
	blacklistLVLI.Add('LItemWeaponMace');
	blacklistLVLI.Add('LItemWeaponNightingale');
	blacklistLVLI.Add('LItemWeaponSailor');
	blacklistLVLI.Add('LItemWeaponSword');
	blacklistLVLI.Add('LItemWeaponWarAxe');
	blacklistLVLI.Add('LItemWeaponWarhammer');
	blacklistLVLI.Add('LItemWEBattlemage');
	blacklistLVLI.Add('LItemWerewolf');
	blacklistLVLI.Add('LItemwerewolfBossWarhammer');
	blacklistLVLI.Add('LItemWESpellsword');
	blacklistLVLI.Add('LItemWEThief');
	blacklistLVLI.Add('LootBanditArmor100');
	blacklistLVLI.Add('LootDwarvenCenturionSoulGem');
	blacklistLVLI.Add('LootFalmerOre100');
	blacklistLVLI.Add('LootGoldChangeUrns');
	blacklistLVLI.Add('LootSabrecatBodyParts');
	blacklistLVLI.Add('LootStaffsNecromancy100');
	blacklistLVLI.Add('MG04RewardLVL');
	blacklistLVLI.Add('MGR01ItemList');
	blacklistLVLI.Add('MGR2');
	blacklistLVLI.Add('MGRitual');
	blacklistLVLI.Add('MQ203AkaviriKatana');
	blacklistLVLI.Add('MQ304TsunBattleAxe');
	blacklistLVLI.Add('MS09Reward');
	blacklistLVLI.Add('OutfitList');
	blacklistLVLI.Add('PenitusGear');
	blacklistLVLI.Add('PrisonerPants50');
	blacklistLVLI.Add('SublistArmor');
	blacklistLVLI.Add('SublistEnch');
	blacklistLVLI.Add('SublistENchDaedricWarAxeAbsorb');
	blacklistLVLI.Add('SublistScaledCuirassVariants');
	blacklistLVLI.Add('SublistSoulGem');
	blacklistLVLI.Add('SublistThalmor');
	blacklistLVLI.Add('SublistWeapon');
	blacklistLVLI.Add('TG02MercLItem');
	blacklistLVLI.Add('TG07Chillrend');
	blacklistLVLI.Add('TGLvlItemNightingale');
	blacklistLVLI.Add('TGPotionof');
	blacklistLVLI.Add('TGRewardPotion');
	blacklistLVLI.Add('TGTQ04DeathItem');
	blacklistLVLI.Add('UDGPDLC1SublistEnchVampireRobesMagickaRate');
	blacklistLVLI.Add('USKPVigilantsWeaponMace');
	blacklistLVLI.Add('USLEEPStormfang');
	blacklistLVLI.Add('USLEEPSublistEnchDaedricBattle');
	blacklistLVLI.Add('VendorEorlundSkyforgeSteelSet');
	blacklistLVLI.Add('WE17BanditOutfitList');
	
	
	
	//--------------------------------
	//Blacklist NPC EditorIDs
	//--------------------------------
	
	blacklistNPC.Add('CWBattleTullius');
	blacklistNPC.Add('CWFieldCOSons');
	blacklistNPC.Add('CWSiege');
	blacklistNPC.Add('DBTreasCorpseSkeleton');
	blacklistNPC.Add('dunBleakFallsCorpseBretonThomas');
	blacklistNPC.Add('dunHonningbrewRatGuy');
	blacklistNPC.Add('dunMarkarthWizard_Guard');
	blacklistNPC.Add('DLC1dunDarkfallTreasCorpse01');
	blacklistNPC.Add('DLC1HunterBaseIntroVigilant');
	blacklistNPC.Add('DLC1VQ01VigilantTolanCorpse');
	blacklistNPC.Add('DLC2dunFahlbtharzExplorerCorpse');
	blacklistNPC.Add('DLC2dunGyldenhulAdventurer');
	blacklistNPC.Add('DLC2EncHunterNordM');
	blacklistNPC.Add('DLC2KagrumezBanditBoss');
	blacklistNPC.Add('DLC2MerilarRendas');
	blacklistNPC.Add('DLC2PillarRRGuard');
	blacklistNPC.Add('DLC2RR');
	blacklistNPC.Add('DLC2ServosRendas');
	blacklistNPC.Add('DLC2WE05Wizard');
	blacklistNPC.Add('dunCGImperialSoldierArcherA04');
	blacklistNPC.Add('dunPOIVolcanicLuckyLorenze');
	blacklistNPC.Add('e3DemoArvel');
	blacklistNPC.Add('E3DemoTowerBanditMissile');
	blacklistNPC.Add('EncForsworn');
	blacklistNPC.Add('EncHunter');
	blacklistNPC.Add('EncVigilantOfStendarr');
	blacklistNPC.Add('GaiusMaro');
	blacklistNPC.Add('Golldir');
	blacklistNPC.Add('Jdatharr');
	blacklistNPC.Add('MQ206Gormlaith');
	blacklistNPC.Add('MQ304Froki');
	blacklistNPC.Add('MS03ChaletGuardExterior');
	blacklistNPC.Add('Player');
	blacklistNPC.Add('SummonGormlaith');
	blacklistNPC.Add('TG08BTreasCorpseThiefNordMaleOld');
	blacklistNPC.Add('TG09TreasCorpseAnders');
	blacklistNPC.Add('TreasCorpseVigilantOfStendarrMale');
	blacklistNPC.Add('Urwa');
	blacklistNPC.Add('WEAdventurerBrawler');
	
	
	
	
	
	//--------------------------------
	//General blacklist EditorIDs for
	//	-base records of REFR records
	//	-items inside of containers and NPCs
	//	-leveled entries
	//--------------------------------
	
	blacklist.Add('DefaultBookShelfBookMarker');
	blacklist.Add('AleWhiterunQuest');
	blacklist.Add('ArmorBoneCrown');
	blacklist.Add('ArmorDragonPriestMaskWoodHelmet');
	blacklist.Add('BasketCarry');
	blacklist.Add('BYOHHouseGuide');
	blacklist.Add('C04HagravenHead');
	blacklist.Add('CasSecEntranceCrest');
	blacklist.Add('CivilWarMapFlag01');
	blacklist.Add('CR12TotemsOfHircine');
	blacklist.Add('CWArrow');
	blacklist.Add('CWDummy');
	blacklist.Add('CWFort');
	blacklist.Add('DA01');
	blacklist.Add('DA03RuefulAxe');
	blacklist.Add('DA04');
	blacklist.Add('DA06Volendrung');
	blacklist.Add('DA07');
	blacklist.Add('DA08EbonyBlade');
	blacklist.Add('DA13Afflicted');
	blacklist.Add('DA14SamNote');
	blacklist.Add('DA14SanguineRose');
	blacklist.Add('DA14Water');
	blacklist.Add('DA16SkullofCorruption');
	blacklist.Add('DA16Torpor');
	blacklist.Add('DancersFlute');
	blacklist.Add('DB003TovaLetter');
	blacklist.Add('DB01AventusLetter');
	blacklist.Add('DB05ElvenBow');
	blacklist.Add('DB06Schedule');
	blacklist.Add('DB07Journal');
	blacklist.Add('DBArmorGlovesReward');
	blacklist.Add('DBBladeOfWoeReward');
	blacklist.Add('DBCiceroJournal');
	blacklist.Add('DLC01DrawKnife');
	blacklist.Add('DLC01DweSchematics');
	blacklist.Add('DLC1ElderScrollBack');
	blacklist.Add('DLC01SoulCairnReaperFragment');
	blacklist.Add('DLC01TortureTool01');
	blacklist.Add('DLC1BoneHawk');
	blacklist.Add('DLC1Book3Valuable');
	blacklist.Add('DLC1DarkfallPassageNote');
	blacklist.Add('DLC1DawnguardRune');
	blacklist.Add('DLC1dunRedwaterDenJournal');
	blacklist.Add('DLC1FVBook02English');
	blacklist.Add('DLC1IvoryCrown');
	blacklist.Add('DLC1LD_Aetheri');
	blacklist.Add('DLC1LD_Katria');
	blacklist.Add('DLC1nVampireNightPowerNecklaceBats');
	blacklist.Add('DLC1RecipeFrenzy1');
	blacklist.Add('DLC1RuunvaldJournal');
	blacklist.Add('DLC1SoulCairnRJPOI2Note');
	blacklist.Add('DLC1SpellTomeConjure');
	blacklist.Add('DLC1VQ07InitiatesEwer');
	blacklist.Add('DLC1V');
	blacklist.Add('DLC2Bl');
	blacklist.Add('DLC2dunBloodskalNote01');
	blacklist.Add('DLC2dunFahlbtharzDwarvenHelmet');
	blacklist.Add('DLC2dunHaknirScimitar01');
	blacklist.Add('DLC2dunKarstaagSkullItemNoName');
	blacklist.Add('DLC2dunKolbjornBoots');
	blacklist.Add('DLC2dunKolbjornGauntlets');
	blacklist.Add('DLC2dunKolbjornHelm');
	blacklist.Add('DLC2dunKolbjornMinersNote');
	blacklist.Add('DLC2dunKolbjornSkull');
	blacklist.Add('DLC2dunKolbjornRalisJournal');
	blacklist.Add('DLC2dunKolbjornRing');
	blacklist.Add('DLC2dunNchardakCube');
	blacklist.Add('DLC2DweKagrumezControlGemInv01');
	blacklist.Add('DLC2ExpSpiderExperimentJournal');
	blacklist.Add('DLC2FrostmothLetter04');
	blacklist.Add('DLC2Hork');
	blacklist.Add('DLC2Hrodulf');
	blacklist.Add('DLC2IldariJournal');
	blacklist.Add('DLC2KagrumezFateBow01');
	blacklist.Add('dlc2MerchNote');
	blacklist.Add('DLC2POIUshaNote01');
	blacklist.Add('DLC2RR');
	blacklist.Add('DLC2TG');
	blacklist.Add('DLC2TT2HeartStone');
	blacklist.Add('dunAbandonedPrisonNote');
	blacklist.Add('dunAlftandDwemerStudy01');
	blacklist.Add('dunAlftandEndrastsJournal01');
	blacklist.Add('dunAlftandJ');
	blacklist.Add('dunAlftandManifestJournal01');
	blacklist.Add('dunAn');
	blacklist.Add('dunBloatedMan');
	blacklist.Add('dunBrokenOarHargarJournal');
	blacklist.Add('dunC');
	blacklist.Add('dunD');
	blacklist.Add('dunEmbershardTatteredJournal');
	blacklist.Add('dunF');
	blacklist.Add('dunG');
	blacklist.Add('dunHa');
	blacklist.Add('dunHuntersBow');
	blacklist.Add('dunIlinaltasDeepAdventurerJournal');
	blacklist.Add('dunIronbindLetter');
	blacklist.Add('dunK');
	blacklist.Add('dunLabyrinthian');
	blacklist.Add('DunLabyrinthianSpellTomeEquilibrium');
	blacklist.Add('dunLiarsRetreatLonghammer');
	blacklist.Add('dunLost');
	blacklist.Add('dunMarkarthWizard_LabJournal');
	blacklist.Add('dunMarkarthWizardSpiderControlStaff');
	blacklist.Add('dunMidden');
	blacklist.Add('dunMistwatch');
	blacklist.Add('dunMovarthsBoots');
	blacklist.Add('dunMzinchaleft');
	blacklist.Add('dunN');
	blacklist.Add('dunOrotheimJournal');
	blacklist.Add('dunP');
	blacklist.Add('DunP');
	blacklist.Add('DUNPOIDragonAttackNote');
	blacklist.Add('dunR');
	blacklist.Add('dunSaarthalStaffJyrikStaff');
	blacklist.Add('dunSerpentsBluffNote');
	blacklist.Add('dunShipwreck04TriusNote');
	blacklist.Add('dunSilentMoonsLunarBook');
	blacklist.Add('dunSteamcragCampNote');
	blacklist.Add('dunT');
	blacklist.Add('dunU');
	blacklist.Add('dunV');
	blacklist.Add('dunW');
	blacklist.Add('dunYng');
	blacklist.Add('DunYngolBarrowSteelPlateHelmet');
	blacklist.Add('EnchArmorDraugrHelmetResistFire03');
	blacklist.Add('EnchCircletWaterbreathing');
	blacklist.Add('EnchDraugrGreatswordHonedFire03');
	blacklist.Add('EnchSteelBattleaxeFierySouls');
	blacklist.Add('Favor');
	blacklist.Add('FF');
	blacklist.Add('FirebrandWine');
	blacklist.Add('Freeform');
	blacklist.Add('FXdustDropMedWEP');
	blacklist.Add('highGateRuinsScroll');
	blacklist.Add('ImperialWarHorn');
	blacklist.Add('IronSwordBrokenHandle');
	blacklist.Add('IronWarAxeBroken');
	blacklist.Add('Letter');
	blacklist.Add('Markarth');
	blacklist.Add('MG03Book');
	blacklist.Add('MGRArniel04SoulGem');
	blacklist.Add('MGRDestruction');
	blacklist.Add('MGRitual02Book');
	blacklist.Add('MGRKeening');
	blacklist.Add('MQ103FarengarBook');
	blacklist.Add('MQ105Note');
	blacklist.Add('MQ106DragonParchment');
	blacklist.Add('MQPaarthurnaxBook');
	blacklist.Add('MS');
	blacklist.Add('NN01SinderionsJournal');
	blacklist.Add('POI');
	blacklist.Add('sc_ArvakSkullUNIQUE');
	blacklist.Add('SolitudeToryggWarHorn');
	blacklist.Add('SpellTomeTransmuteOreMineral');
	blacklist.Add('SovRoastOx');
	blacklist.Add('SteelBattleAxeBroken');
	blacklist.Add('T0');
	blacklist.Add('TG00MadesiRing');
	blacklist.Add('TG01HaelgaStatue');
	blacklist.Add('TG02BillofSale');
	blacklist.Add('TG03SabjornLetter');
	blacklist.Add('TG04');
	blacklist.Add('TG05GallusJournalPre');
	blacklist.Add('TG07Chillrend001');
	blacklist.Add('TG07MercersPlans');
	blacklist.Add('TG08SkeletonKey');
	blacklist.Add('TGBook0NightingalesVolume');
	blacklist.Add('TGCrown');
	blacklist.Add('TGFenceCaravanSatchel');
	blacklist.Add('TGLT');
	blacklist.Add('TGTQ');
	blacklist.Add('TGRFOValueItem');
	blacklist.Add('TGRGeneralValueItem');
	blacklist.Add('TGTQ03SolitudeLetter');
	blacklist.Add('TrapDweBallistaBoltAmmo01');
	blacklist.Add('Windhelm');
	blacklist.Add('YsgramorsBladePiece07');
	
	//--------------------------------
	//Blacklist REFR EditorIDs
	//--------------------------------
	
	//blacklistREFR.Add('FavorTorbjornItemREF');
	//^example^: remove the '//' if you want this to work. '//' comments out stuff so it won't be read by xEdit
	
	blacklistREFR.Add('DA16AwakeBarrierGem');
	blacklistREFR.Add('DBMarkarthDagger');
	blacklistREFR.Add('Favor');
	blacklistREFR.Add('FestivalSpicedWineSpigotRef');
	blacklistREFR.Add('SiddgeirBlackBriarMeadREF');
	blacklistREFR.Add('YsoldaFavorItemREF');
	
	//--------------------------------
	//Blacklist FLOR EditorIDs
	//--------------------------------
	
	//blacklistFLOR.Add('');
	//^example^: remove the '//' if you want this to work. '//' comments out stuff so it won't be read by xEdit
	
	
	//--------------------------------
	//Blacklist TREE EditorIDs
	//--------------------------------
	
	//blacklistTREE.Add('');
	//^example^: remove the '//' if you want this to work. '//' comments out stuff so it won't be read by xEdit
	
	
	lastPercent := 0;

	for i := 0 to MaxPatchRecordIndex do begin
		rec := GetPatchRecord(i);

		//--------------------------------
		//Current process message
		//--------------------------------
		currentFile := BaseName(GetFile(Master(rec)));
		if not (Signature(rec) = currentSignature) then begin
				currentSignature := Signature(rec);
				AddMessage('----------------------------------------------------------------');
				AddMessage('Now patching ' + currentSignature + ' in ' + currentFile);
				AddMessage('----------------------------------------------------------------');
		end;

		//--------------------------------
		//Percent done message
		//--------------------------------
		if not (MaxPatchRecordIndex = 0) then begin
			if ((i  * 100) div MaxPatchRecordIndex) > lastPercent then begin
				AddMessage(IntToStr((i  * 100) div MaxPatchRecordIndex) + '% patched!');
				lastPercent := lastPercent + 1;
			end;
		end;
		
		editorID := geev(rec, 'EDID');
		formID := HexFormID(rec);

		//--------------------------------
		//Process records
		//--------------------------------
		if currentSignature = 'REFR' then begin
			
			//Assign utility variables
			rName := geev(rec, 'NAME');
			rSignature := getSignature(rName);
			rEditorID := getEditorID(rName);
			rFormID := getFormID(rName);
			
			//Check for potential errors and sort out records that shall not be processed
			if (not Assigned(ebip(rec, 'NAME'))) or (not hasPovertySignature(rSignature)) or (Copy(rEditorID, 0, 5) = 'Dummy') or IsInTStringListCopy(blacklist, rEditorID) or IsInTStringListCopy(blacklistREFR, geev(rec, 'EDID')) then begin
				Remove(rec);
				Continue;
			end
			else begin
				rItemRecord := RecordByHexFormID(rFormID);
				
				//Add poverty LVLI record
				lvliRecord := AddLVLI(mxPatchFile, rItemRecord, 'REFR', rEditorID, rFormID);
				
				//Add XLIB to reference
				if not Assigned(ebip(rec, 'XLIB')) then
					Add(rec, 'XLIB', true);
				seev(rec, 'XLIB', HexFormID(lvliRecord));
				
				//Check for keywords of the placed base record
				
				
				if IsWinningOverride(rItemRecord) then begin
					for j := 0 to ElementCount(ebip(rItemRecord, 'KWDA')) - 1 do begin
						referenceKeywords.Add(getEditorID(geev(rItemRecord, 'KWDA\[' + IntToStr(j) + ']')));
					end;
				end
				else begin
					for j := 0 to ElementCount(ebip(WinningOverride(rItemRecord), 'KWDA')) - 1 do begin
						referenceKeywords.Add(getEditorID(geev(WinningOverride(rItemRecord), 'KWDA\[' + IntToStr(j) + ']')));
					end;
				end;				
				
				//Change the name
				Case Pos(rSignature, 'ALCH|AMMO|ARMO|BOOK|INGR|MISC|SLGM|WEAP') of
					1: 	begin
							seev(rec, 'NAME', dummyFood);
							if getEditorID(geev(rItemRecord, 'ENIT\Sound - Consume')) = 'ITMPotionUse' then
								seev(rec, 'NAME', dummyDrink);
							for j := 0 to referenceKeywords.Count - 1 do begin
								Case Pos(referenceKeywords[j], 'VendorItemPotion|VendorItemPoison') of
									1: seev(rec, 'NAME', dummyPotion);
									18: seev(rec, 'NAME', dummyPotion);
								end;
							end;
						end;
					6: seev(rec, 'NAME', dummyArrow);
					11: begin
							for j := 0 to referenceKeywords.Count - 1 do begin
								Case Pos(referenceKeywords[j], 'ArmorBoots|ArmorCuirass|ArmorGauntlets|ArmorHelmet|ArmorShield|ClothingCirclet|ClothingRing|ClothingNecklace|ClothingFeet|ClothingBody|ClothingHands|ClothingHead') of
									1:	begin 
											seev(rec, 'NAME', dummyBoots);
											Break;
										end;
									12: begin 
											seev(rec, 'NAME', dummyCuirass);
											Break;
										end;
									25: begin 
											seev(rec, 'NAME', dummyGauntlets);
											Break;
										end;
									40: begin 
											seev(rec, 'NAME', dummyHelmet);
											Break;
										end;
									52: begin 
											seev(rec, 'NAME', dummyShield);
											Break;
										end;
									64: begin 
											seev(rec, 'NAME', dummyCirclet);
											Break;
										end;
									80: begin 
											seev(rec, 'NAME', dummyRing);
											Break;
										end;
									93: begin 
											seev(rec, 'NAME', dummyAmulet);
											Break;
										end;
									110: begin 
											seev(rec, 'NAME', dummyBoots);
											Break;
										end;
									123: begin 
											seev(rec, 'NAME', dummyCuirass);
											Break;
										end;
									136: begin 
											seev(rec, 'NAME', dummyGauntlets);
											Break;
										end;
									150: begin 
											seev(rec, 'NAME', dummyHelmet);
											Break;
										end;
								end;
							end;
						end;
					16: seev(rec, 'NAME', dummyBook);
					21: seev(rec, 'NAME', dummyIngredient);
					26: begin
							seev(rec, 'NAME', dummyClutter);
							if rEditorID = 'Gold001' then begin
								seev(rec, 'NAME', dummySeptim);
								Continue;
							end;
							for j := 0 to ReferencedByCount(rItemRecord) - 1 do begin
								if getSignature(geev(ReferencedByIndex(rItemRecord, j), 'Record Header\FormID')) = 'COBJ' then begin
									seev(rec, 'NAME', dummyResource);
									Break;
								end;
							end;
						end;
					31: seev(rec, 'NAME', dummySoulGem);
					36: begin
							for j := 0 to referenceKeywords.Count - 1 do begin
								Case Pos(referenceKeywords[j], 'WeapTypeBattleaxe|WeapTypeBow|WeapTypeDagger|WeapTypeGreatsword|WeapTypeMace|WeapTypeSword|WeapTypeWarAxe|WeapTypeWarhammer|WeapTypeStaff') of
									1: 	begin 
											seev(rec, 'NAME', dummyBattleaxe);
											Break;
										end;
									19: begin 
											seev(rec, 'NAME', dummyBow);
											Break;
										end;
									31: begin 
											seev(rec, 'NAME', dummyDagger);
											Break;
										end;
									46: begin 
											seev(rec, 'NAME', dummyGreatSword);
											Break;
										end;
									65: begin 
											seev(rec, 'NAME', dummyMace);
											Break;
										end;
									78: begin 
											seev(rec, 'NAME', dummySword);
											Break;
										end;
									92: begin 
											seev(rec, 'NAME', dummyWarAxe);
											Break;
										end;
									107:begin 
											seev(rec, 'NAME', dummyWarhammer);
											Break;
										end;
									125:begin 
											seev(rec, 'NAME', dummyStaff);
											Break;
										end;
								end;
							end;
						end;
					else begin
						failedFormIDs.Add(geev(rec, 'Record Header\FormID'));
						Remove(rec);
						Continue;
					end;
				end;
				
				//Remove record if it was not successfully processed
				if not (Copy(getEditorID(geev(rec, 'NAME')), 0, 5) = 'Dummy') then begin
					failedFormIDs.Add(geev(rec, 'Record Header\FormID'));
					Remove(rec);
					Continue;
				end;
				
				//Clear TStringLists
				referenceKeywords.Clear;
			end;
		end
		else if currentSignature = 'CONT' then begin
			if (not Assigned(ebip(rec, 'Items'))) or IsInTStringListCopy(blacklistCONT, EditorID(rec)) then begin
				Remove(rec);
				Continue;
			end
			else begin
				//Add items to list and delete them
				k := 0;
				for j := 0 to ElementCount(ebip(rec, 'Items')) - 1 do begin
					item := geev(rec, 'Items\[' + IntToStr(k) + ']\CNTO\Item');
					if (getSignature(item) = 'LVLI') or (getSignature(item) = 'KEYM') or (Copy(getEditorID(item), 0, 5) = 'Dummy') or IsInTStringListCopy(blacklist, getEditorID(item)) then begin
						k := k + 1;
					end
					else begin
						cItem := ebip(rec, 'Items\[' + IntToStr(k) + ']');
						cItemsList.Add(geev(rec, 'Items\[' + IntToStr(k) + ']\CNTO\Item'));
						cCountsList.Add(geev(rec, 'Items\[' + IntToStr(k) + ']\CNTO\Count'));
						Remove(cItem);
						
					end;
				end;
				if cItemsList.Count = 0 then begin
					Remove(rec);
					Continue;
				end;
				//Create new items and their Leveled List
				for j := 0 to cItemsList.Count - 1 do begin
					cNewItem := cItemsList[j];
					if ContainsText(cNewItem, 'Error: Could not be resolved') then begin
						errorFormIDs.Add(cNewItem + ' in ' + editorID ' in file ' + currentFile);
						Continue;
					end;
					cEditorID := getEditorID(cNewItem);
					//Add poverty LVLI record
					lvliRecord := AddLVLI(mxPatchFile, rec, 'CONT', cEditorID, getFormID(cNewItem));
					//Add new item and change its values
					cItem := ElementAssign(ebip(rec, 'Items'), HighInteger, nil, false);
					seev(cItem, 'CNTO\Item', geev(lvliRecord, 'Record Header\FormID'));
					seev(cItem, 'CNTO\Count', cCountsList[j]);
				end;
			end;
			cItemsList.Clear;
			cCountsList.Clear;
		end
		else if currentSignature = 'FLOR' then begin
			if (not Assigned(ebip(rec, 'PFIG'))) or IsInTStringListCopy(blacklistFLOR, EditorID(rec)) then begin
				Remove(rec);
				Continue;
			end
			else begin
				//Assign utility variables
				fIngredient := geev(rec, 'PFIG');
				fSignature := getSignature(fIngredient);
				fEditor := getEditorID(fIngredient);
				fFormID := getFormID(fIngredient);
				
				//Sort out records that shall not be processed
				if (not (fSignature = 'ALCH')) and (not (fSignature = 'INGR')) then begin
					Remove(rec);
					Continue;
				end;
				
				//Add poverty LVLI record
				lvliRecord := AddLVLI(mxPatchFile, rec, 'FLOR', fEditor, fFormID);
				
				//Change PFIG value
				seev(rec, 'PFIG', geev(lvliRecord, 'Record Header\FormID'));
			end;
		end
		else if currentSignature = 'LVLI' then begin
			lEntries := ebip(rec, 'Leveled List Entries');
			if (not Assigned(lEntries)) or IsInTStringListCopy(blacklistLVLI, EditorID(rec)) then begin
				Remove(rec);
				Continue;
			end
			else begin
				//Add items to list and delete them
				k := 0;
				for j := 0 to ElementCount(lEntries) - 1 do begin
				reference := geev(rec, 'Leveled List Entries\[' + IntToStr(k) + ']\LVLO\Reference');
					if (getSignature(reference) = 'KEYM') or (getSignature(reference) = 'LVLI') or (Copy(getEditorID(reference), 0, 5) = 'Dummy') or IsInTStringListCopy(blacklist, getEditorID(reference)) then begin
						k := k + 1;
					end
					else begin
						lEntry := ebip(rec, 'Leveled List Entries\[' + IntToStr(k) + ']');
						lLevelList.Add(geev(rec, 'Leveled List Entries\[' + IntToStr(k) + ']\LVLO\Level'));
						lReferenceList.Add(geev(rec, 'Leveled List Entries\[' + IntToStr(k) + ']\LVLO\Reference'));
						lCountList.Add(geev(rec, 'Leveled List Entries\[' + IntToStr(k) + ']\LVLO\Count'));
						Remove(lEntry);
					end;
				end;
				
				if lLevelList.Count = 0 then begin
					Remove(rec);
					Continue;
				end;
				
				//Create new items and their Leveled List
				for j := 0 to lReferenceList.Count - 1 do begin
					lNewItem := lReferenceList[j];
					
					//Check for errors
					if ContainsText(lNewItem, 'Error: Could not be resolved') then begin
						errorFormIDs.Add(lNewItem + ' in ' + editorID);
						Continue;
					end;
					
					//Assign utility variables
					lEditorID := getEditorID(lNewItem);
					lSignature := getSignature(lNewItem);
					
					//Add poverty LVLI record
					lvliRecord := AddLVLI(mxPatchFile, rec, 'LVLI', lEditorID, getFormID(lNewItem));
					
					//Add new entry and change its values
					lEntry := ElementAssign(lEntries, HighInteger, nil, false);
					seev(lEntry, 'LVLO\Level', lLevelList[j]);
					seev(lEntry, 'LVLO\Reference', geev(lvliRecord, 'Record Header\FormID'));
					seev(lEntry, 'LVLO\Count', lCountList[j]);
				end;
			end;
			lLevelList.Clear;
			lReferenceList.Clear;
			lCountList.Clear;
		end
		else if currentSignature = 'NPC_' then begin
			if (not Assigned(ebip(rec, 'Items'))) or IsInTStringListCopy(blacklistNPC, EditorID(rec)) then begin
				Remove(rec);
				Continue;
			end
			else begin
				//Add items to list and delete them
				k := 0;
				for j := 0 to ElementCount(ebip(rec, 'Items')) - 1 do begin
					item := geev(rec, 'Items\[' + IntToStr(k) + ']\CNTO\Item');
					nSignature := getSignature(item);
					if (nSignature = 'LVLI') or (nSignature = 'KEYM') or (nSignature = 'WEAP') or (((nSignature = 'ARMO') or (nSignature = 'AMMO')) and (geev(rec, 'Items\[' + IntToStr(k) + ']\CNTO\Count') = 1)) or (Copy(getEditorID(item), 0, 5) = 'Dummy') or IsInTStringListCopy(blacklist, getEditorID(item)) then begin
						k := k + 1;
					end
					else begin
						cItem := ebip(rec, 'Items\[' + IntToStr(k) + ']');
						cItemsList.Add(geev(rec, 'Items\[' + IntToStr(k) + ']\CNTO\Item'));
						cCountsList.Add(geev(rec, 'Items\[' + IntToStr(k) + ']\CNTO\Count'));
						Remove(cItem);
					end;
				end;
				
				if cItemsList.Count = 0 then begin
					Remove(rec);
					Continue;
				end;
				
				for j := 0 to cItemsList.Count - 1 do begin
					cNewItem := cItemsList[j];
					
					//Check for errors
					if ContainsText(cNewItem, 'Error: Could not be resolved') then begin
						errorFormIDs.Add(cNewItem + ' in ' + editorID);
						Continue;
					end;
					
					//Assign utility variables
					cEditorID := getEditorID(cNewItem);
					nSignature := getSignature(cNewItem);
					
					//Add poverty LVLI record
					lvliRecord := AddLVLI(mxPatchFile, rec, 'NPC_', cEditorID, getFormID(cNewItem));
					
					//Add new item and change its values
					cItem := ElementAssign(ebip(rec, 'Items'), HighInteger, nil, false);
					seev(cItem, 'CNTO\Item', geev(lvliRecord, 'Record Header\FormID'));
					seev(cItem, 'CNTO\Count', cCountsList[j]);
				end;
			end;
			cItemsList.Clear;
			cCountsList.Clear;
		end
		else if currentSignature = 'TREE' then begin
			if (not Assigned(ebip(rec, 'PFIG'))) or IsInTStringListCopy(blacklistTREE, EditorID(rec)) then begin
				Remove(rec);
				Continue;
			end
			else begin
				tIngredient := geev(rec, 'PFIG');
				tEditorID := getEditorID(tIngredient);
				tSignature := getSignature(tIngredient);
				tFormID := getFormID(tIngredient);
				if (not (tSignature = 'ALCH')) and (not (tSignature = 'INGR')) then begin
					Remove(rec);
					Continue;
				end;
				
				//Add poverty LVLI record
				lvliRecord := AddLVLI(mxPatchFile, rec, 'TREE', tEditorID, tFormID);
				
				//Change PFIG value
				seev(rec, 'PFIG', geev(lvliRecord, 'Record Header\FormID'));
			end;
		end;
	end;

	//--------------------------------
	//Final warnings
	//--------------------------------
	if failedFormIDs.Count > 0 then begin
		AddMessage(' ');
		AddMessage('WARNING: Those References were not patched due to a lack of keywords in their base record');
		AddMessage(' ');
		AddMessageTStringList(failedFormIDs);
    end;
	if errorFormIDs.Count > 0 then begin
		AddMessage(' ');
		AddMessage('WARNING: Those records could not be used as they contain an error | Please contact the mod author politely');
		AddMessage(' ');
		AddMessageTStringList(errorFormIDs);
    end;

	//--------------------------------
	//MXPF Finalization
	//--------------------------------
	FinalizeMXPF;
end;

//--------------------------------
//Utility functions
//--------------------------------

function getFormID(s: string): string;
begin
  Result := Copy(s, Pos('[', s) + 6, 8);
end;

function getEditorID(s: string): string;
begin
  Result := Copy(s, 0, Pos(' ', s) - 1);
end;

function getSignature(s: string): string;
begin
  Result := Copy(s, Pos('[', s) + 1, 4);
end;

function RecordByEditorIDAllFiles(group, eid: string): IInterface;
var
    i: integer;
begin
    Result := nil;
    for i := 0 to FileCount - 1 do begin
				if HasGroup(FileByIndex(i), group) then begin
          if Assigned(MainRecordByEditorID(GroupBySignature(FileByIndex(i), group), eid)) then begin
						Result := MainRecordByEditorID(GroupBySignature(FileByIndex(i), group), eid);
            Exit;
          end
				end
    end
end;

function IsInTStringList(sl: TStringList; s: string): boolean;
var
	i: integer;
begin
	Result := false;
	for i := 0 to sl.Count - 1 do begin
		if sl.IndexOf(s) > -1  then begin
			Result := true;
			Exit;
		end;
	end;
end;

function IsInTStringListCopy(sl: TStringList; s: string): boolean;
var
	i: integer;
begin
	Result := false;
	for i := 0 to sl.Count - 1 do begin
		if Copy(s, 0, Length(sl[i])) = sl[i] then begin
			Result := true;
			Exit;
		end;
	end;
end;

procedure AddMessageTStringList(sl: TStringList);
var
	i: integer;
begin
	for i := 0 to sl.Count - 1 do begin
		AddMessage(sl[i]);
	end;
end;

procedure AddMessageCurrentItemsStructure(rec: IInterface);
var
	i: integer;
begin
	for i := 0 to ElementCount(ebip(rec, 'Items')) - 1 do begin
		AddMessage(IntToStr(i) + ': ' + geev(rec, 'Items\[' + IntToStr(i) + ']\CNTO\Item'));
	end;
end;

function hasPovertySignature(s: string): bool;
var
	i: integer;
begin
	Result := false;
	if ContainsText('ALCH|AMMO|ARMO|BOOK|INGR|MISC|SLGM|WEAP', s) then
		Result := true;
end;

function AddLVLI(f, rec: IInterface; origin, eid, fid: string): IInterface;
var
	i: integer;
	referenceKeywords: TStringList;
	signature, reference, povertyFileLoadOrder, pAmmo, pArmor, pBook, pIngredient, pClutter, pSoulGem, pWeapon, pFood, pHarvestFoodFlora, pPotion, pResource, pGold, pDrink, pHarvestIngredientsFlora, pHarvestFoodNPC, pHarvestResourceNPC, pAmmoNPC, pMerchantGold, pBookSpell, pHarvestFoodFloraHanging, pHarvestIngredientsNPC, pMineNotInUse, pBugFishNotInUse: string;
	innerlvli, lvli, itemRecord, fidRecord: IInterface;
begin
	//Get global value from Poverty
	povertyFileLoadOrder := IntToStr(GetLoadOrder(FileByName('Poverty.esp')));
	//ALCH
	pHarvestFoodFlora := povertyFileLoadOrder + '00AA19';
	pHarvestFoodNPC := povertyFileLoadOrder + '01A023';
	pFood := povertyFileLoadOrder + '00AA18';
	pPotion := povertyFileLoadOrder + '00AA1A';
	pDrink := povertyFileLoadOrder + '014C21';
	//AMMO
	pAmmo := povertyFileLoadOrder + '000802';
	pAmmoNPC := povertyFileLoadOrder + '01A17E';
	//ARMO
	pArmor := povertyFileLoadOrder + '005911';
	//BOOK
	pBook := povertyFileLoadOrder + '005912';
	pBookSpell := povertyFileLoadOrder + '01A21F';
	//INGR
	pIngredient := povertyFileLoadOrder + '005913';
	pHarvestIngredientsNPC := povertyFileLoadOrder + '01A3DA';
	pHarvestIngredientsFlora := povertyFileLoadOrder + '014CA1';
	//MISC
	pClutter := povertyFileLoadOrder + '005914';
	pResource := povertyFileLoadOrder + '00AA1B';
	pHarvestResourceNPC := povertyFileLoadOrder + '01A162';
	pGold := povertyFileLoadOrder + '00FB1E';
	pMerchantGold := povertyFileLoadOrder + '01A17F';
	//SLGM
	pSoulGem := povertyFileLoadOrder + '005915';
	//WEAP
	pWeapon := povertyFileLoadOrder + '005916';
	//Not used right now
	pHarvestFoodFloraHanging := povertyFileLoadOrder + '01A3D7';
	pMineNotInUse := povertyFileLoadOrder + '01A44E';
	pBugFishNotInUse := povertyFileLoadOrder + '01A44F';
	
	referenceKeywords := TStringList.Create;
	
	//If reference is LVLI get the first non LVLI entry
	fidRecord := RecordByHexFormID(fid);
	if not IsWinningOverride(fidRecord) then
		fidRecord := WinningOverride(fidRecord);
	signature := getSignature(BaseName(fidRecord));
	
	if signature = 'LVLI' then begin
		innerlvli := RecordByHexFormID(getFormID(geev(fidRecord, 'Leveled List Entries\[0]\LVLO\Reference')));
		while Assigned(innerlvli) and (signature = 'LVLI') do begin
			signature := getSignature(BaseName(innerlvli));
			if signature = 'LVLI' then begin
				if Assigned(RecordByHexFormID(getFormID(geev(innerlvli, 'Leveled List Entries\[0]\LVLO\Reference')))) then begin
					innerlvli := WinningOverride(RecordByHexFormID(getFormID(geev(innerlvli, 'Leveled List Entries\[0]\LVLO\Reference'))));
					if not IsWinningOverride(innerlvli) then
						innerlvli := WinningOverride(innerlvli);
				end
				else begin
					signature := getSignature(BaseName(fidRecord));
				end;
			end;
		end;
	end
	else begin
		innerlvli := fidRecord;
	end;
	
	//Special cases
	if ContainsText(geev(fidRecord, 'EDID'), 'Gold') and (ContainsText(geev(fidRecord, 'EDID'), 'Vendor') or ContainsText(geev(fidRecord, 'EDID'), 'Merchant')) then begin
		eid := eid + '_MERCHANT';
	end
	else if ContainsText(geev(fidRecord, 'EDID'), 'SpellTome') or ContainsText(geev(fidRecord, 'EDID'), 'Scroll') then begin
		eid := eid + '_SPELL';
	end
	else if origin = 'NPC_' then begin
		for i := 0 to ReferencedByCount(fidRecord) - 1 do begin
			if getSignature(geev(ReferencedByIndex(fidRecord, i), 'Record Header\FormID')) = 'COBJ' then begin
				eid := eid + '_NPC';
				Break;
			end;
		end;
		if signature = 'AMMO' then
			eid := eid + '_NPC';
	end;
	
	//Add LVLI record
	lvli := RecordByEditorIDAllFiles('LVLI', 'p' + eid);
	if not Assigned(lvli) then begin
		
		//Add group record and lvliRecord
		if not Assigned(GroupBySignature(f, 'LVLI')) then
			Add(f, 'LVLI', true);
		lvli := Add(GroupBySignature(f, 'LVLI'), 'LVLI', true);
		Result := lvli;
		//Add EditorID
		Add(lvli, 'EDID', true);
		seev(lvli, 'EDID', 'p' + eid);
		
		//Add Flag
		SetNativeValue(ebip(lvli, 'LVLF'), GetNativeValue(ebip(lvli, 'LVLF')) or 1 shl 1);
		
		//Add Count
		Add(lvli, 'LLCT', true);
		seev(lvli, 'LLCT', '1');
		
		//Add Leveled List Entry
		Add(lvli, 'Leveled List Entries', true);
		seev(lvli, 'Leveled List Entries\[0]\LVLO\Level', '1');
		seev(lvli, 'Leveled List Entries\[0]\LVLO\Reference', fid);
		seev(lvli, 'Leveled List Entries\[0]\LVLO\Count', '1');
		//Add Global
		Add(lvli, 'LVLG', true);
		if IsWinningOverride(fidRecord) then begin
			for i := 0 to ElementCount(ebip(fidRecord, 'KWDA')) - 1 do begin
				referenceKeywords.Add(getEditorID(geev(fidRecord, 'KWDA\[' + IntToStr(i) + ']')));
			end;
		end
		else begin
			for i := 0 to ElementCount(ebip(WinningOverride(fidRecord), 'KWDA')) - 1 do begin
				referenceKeywords.Add(getEditorID(geev(WinningOverride(fidRecord), 'KWDA\[' + IntToStr(i) + ']')));
			end;
		end;
		Case Pos(signature, 'ALCH|AMMO|ARMO|BOOK|INGR|MISC|SLGM|WEAP|SCRL') of
			//Process ALCH global
			1: 	begin
					if (origin = 'FLOR') or (origin = 'TREE') then begin
						seev(lvli, 'LVLG', pHarvestFoodFlora);
					end
					else if (origin = 'NPC_') then begin
						seev(lvli, 'LVLG', pHarvestFoodNPC);
					end
					else begin
						seev(lvli, 'LVLG', pFood);
						if getEditorID(geev(fidRecord, 'ENIT\Sound - Consume')) = 'ITMPotionUse' then
							seev(lvli, 'LVLG', pDrink);
						for i := 0 to referenceKeywords.Count - 1 do begin
							Case Pos(referenceKeywords[i], 'VendorItemPotion|VendorItemPoison') of
								1: seev(lvli, 'LVLG', pPotion);
								18: seev(lvli, 'LVLG', pPotion);
							end;
						end;
					end;
				end;
			//Process AMMO global
			6: 	begin
					if Copy(eid, length(eid) - 3, 4) = '_NPC' then begin
						seev(lvli, 'LVLG', pAmmoNPC);
					end
					else begin
						seev(lvli, 'LVLG', pAmmo);
					end;
				end;
			//Process ARMO global
			11: seev(lvli, 'LVLG', pArmor);
			//Process BOOK global
			16: begin
					if Copy(eid, length(eid) - 5, 6) = '_SPELL' then begin
						seev(lvli, 'LVLG', pBookSpell);
					end
					else begin
						seev(lvli, 'LVLG', pBook);
					end;
				end;
			//Process INGR global
			21: begin
					if (origin = 'FLOR') or (origin = 'TREE') then begin
						seev(lvli, 'LVLG', pHarvestIngredientsFlora);
					end
					else if origin = 'NPC_' then begin
						seev(lvli, 'LVLG', pHarvestIngredientsNPC);
					end
					else begin
						seev(lvli, 'LVLG', pIngredient);
					end;
				end;
			//Process MISC global
			26: begin
					seev(lvli, 'LVLG', pClutter);
					if Copy(eid, length(eid) - 8, 9) = '_MERCHANT' then begin
						seev(lvli, 'LVLG', pMerchantGold);
					end
					else if ContainsText(geev(fidRecord, 'EDID'), 'Gold') then begin
						seev(lvli, 'LVLG', pGold);
					end;
					if Copy(eid, length(eid) - 3, 4) = '_NPC' then begin
						seev(lvli, 'LVLG', pHarvestResourceNPC);
					end
					else begin
						for i := 0 to ReferencedByCount(innerlvli) - 1 do begin
							if getSignature(geev(ReferencedByIndex(innerlvli, i), 'Record Header\FormID')) = 'COBJ' then begin
								seev(lvli, 'LVLG', pResource);
								Break;
							end;
						end;
					end;
				end;
			//Process SLGM global
			31: seev(lvli, 'LVLG', pSoulGem);
			//Process WEAP global
			36: seev(lvli, 'LVLG', pWeapon);
			//Process SCRL global
			41: seev(lvli, 'LVLG', pBookSpell);
		end;
	end
	else begin
		Result := lvli;
	end;
end;

end.
